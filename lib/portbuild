#!/bin/sh

usage () {
    echo "usage: $0 <build name> <jail name> <portstree name> [-noclean] [-plistcheck] [-nullfs] pkgname dirname"
    exit 1
}

kill_procs()
{
    dir=$1

    pids="XXX"
    while [ ! -z "${pids}" ]; do
	pids=$(fstat -f "$dir" | tail +2 | awk '{print $3}' | sort -u)
	if [ ! -z "${pids}" ]; then
	    echo "Killing off pids in ${dir}"
	    ps -p $pids
	    kill -KILL ${pids} 2> /dev/null
	    sleep 2
	fi
    done
}

cleanup_mount() {
    chroot=$1
    mount=$2

    if [ -d ${chroot}${mount} ]; then
	mdir=$(fstat -f ${chroot}${mount} | head -2 | tail -1 | awk '{print $5}')
	if [ "${mdir}" = "MOUNT" ]; then
	    umount ${chroot}${mount} || echo "Cleanup of ${chroot}${mount} failed!"
	fi
	if [ "${mdir}" = "${chroot}${mount}" ]; then
	    kill_procs ${chroot}${mount}
	    umount ${chroot}${mount} || echo "Cleanup of ${chroot}${mount} failed!"
	fi
    fi
}

cleanup()
{
    chroot=$1
    noclean=$2
    error=$3
    cleandirs=$4
    pkgname=$5
    pb=$6
    branch=$7

    if [ ${ARCH} = "i386" ]; then
	cleanup_mount ${chroot} /compat/linux/proc
    fi

    cleanup_mount ${chroot} /a/ports
    cleanup_mount ${chroot} /usr/src
    cleanup_mount ${chroot} /dev
    test -n "${CCACHE_DIR}" && test -d ${chroot}/${CCACHE_DIR} && cleanup_mount ${chroot} ${CCACHE_DIR}
    if [ -n "${DISTFILE_CACHE}" ]; then
	if [ -f ${chroot}${DISTCACHE}/.lock ]; then
	    lpid=$(echo ${chroot}${DISTCACHE}/.lock)
	    if [ ${lpid} = $$ ]; then
		rm -f ${chroot}${DISTCACHE}/.lock
	    fi
	fi
        test -d ${chroot}${DISTCACHE} && cleanup_mount ${chroot} ${DISTCACHE}
    fi

    if [ $noclean = 0 ]; then
	rm -rf ${chroot}/tmp/*
	for dir in ${cleandirs}; do
	    if ! rm -rf ${chroot}${dir} >/dev/null 2>&1; then
		chflags -R noschg ${chroot}${dir}
		rm -rf ${chroot}${dir} >/dev/null 2>&1
	    fi
	done
	chroot ${chroot} /sbin/ldconfig -R
	chroot ${chroot} /sbin/ldconfig -aout -R
	rm -rf ${chroot}/var/db/pkg/*
    fi

    echo -n "$pkgname done at "
    date

    ${pb}/scripts/tc updateBuildCurrentPort -b ${branch}

    exit $error
}

# Configurable variables
pb=/space

error=0
init=0
noclean=0
nullfs=0

# check parameter count
if [ $# -lt 5 ]; then
    usage
fi

branch=$1
shift
jail=$1
shift
portstree=$1
shift

# Default niceness value
nice=0

. ${pb}/scripts/buildenv

if [ "x$1" = "x-noclean" ]; then
    noclean=1
    shift
fi

plistcheck=0
if [ "x$1" = "x-plistcheck" ]; then
    plistcheck=1
    export PLISTCHECK=1
    shift
fi

if [ "x$1" = "x-nullfs" ]; then
    nullfs=1
    shift
fi

args="$*"

buildenv ${pb} ${branch} ${jail} ${portstree}
unset DISPLAY

pkgname=$(basename $1 ${PKGSUFFIX})

if grep -qxF ${pkgname} ${pb}/builds/${branch}/duds; then
    echo "skipping ${pkgname} (found in duds)"
    exit 1
fi

dirname=$2
shift 2

portdir=$(echo ${dirname} | sed -e 's|^/usr/ports/||')

# Want to use the /etc/make.conf in the chroot (Jail)
unset __MAKE_CONF

export WRKDIRPREFIX=/work
export DISTDIR=/tmp/distfiles
export PACKAGES=/tmp/packages

unset MAKEFLAGS
unset PORTSDIR

# Unset all of the locale variables to ensure C/POSIX is used to build
# everything.
unset LC_ALL
unset LC_TIME
unset LC_CTYPE
unset LC_MONETARY
unset LC_COLLATE
unset LC_MESSAGES
unset LC_NUMERIC
unset LANG

export TIMEOUT=7200

ulimit -f 524288
ulimit -t 3600

cleandirs="/usr/local /usr/X11R6 /compat /var/db/pkg"

export FTP_TIMEOUT=900
export HTTP_TIMEOUT=900
export FTP_PASSIVE_MODE=yes

export BATCH=1
export PACKAGE_BUILDING=1

export PORTOBJFORMAT=elf

export USA_RESIDENT=yes

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/X11R6/bin

if [ -n "${CCACHE_ENABLED}" ]; then
    # XXX We need to do this since certain ports (e.g. cdrtools) don't
    # respect CC the way they should (thanks for the tip, Adam).
    export PATH=/opt:${PATH}
if [ -n "${CCACHE_MAX_SIZE}" ]; then
    # Example: CCACHE_MAX_SIZE=2G (2 GB)
    # G=GB, M=MB, K=KB
    ccache -M ${CCACHE_MAX_SIZE}
fi
fi

# Use the *.env file to specify per-jail, per-portstree, and per-build
# environment variables.
[ -f ${pb}/jails/${jail}/jail.env ] && . ${pb}/jails/${jail}/jail.env
[ -f ${pb}/portstrees/${portstree}/portstree.env ] && \
	. ${pb}/portstrees/${portstree}/portstree.env
[ -f ${pb}/builds/${branch}/build.env ] && . ${pb}/builds/${branch}/build.env

echo "building $pkgname"

${pb}/scripts/tc updateBuildCurrentPort -b ${branch} -n ${pkgname}

chroot=${pb}/${branch}
packages=${pb}/packages/${branch}

major_version=$(echo ${jail} | sed -E -e 's|(^.).*$|\1|')

if [ "${major_version}" = "4" ]; then
    mkdir -p ${chroot}/libexec
    mkdir -p ${chroot}/lib
    if [ "${ARCH}" = "i386" ]; then
        cp -p /sbin/mount_linprocfs /sbin/mount /sbin/umount ${chroot}/sbin
        cp -p /lib/libufs.so.2 ${chroot}/lib
    fi
    cp -p /libexec/ld-elf.so.1 ${chroot}/libexec
    cp -p /lib/libkvm.so.2 /lib/libm.so.3 ${chroot}/lib
    if [ -f /lib/libc.so.6 ]; then
	cp -p /lib/libc.so.6 ${chroot}/lib
    else
	cp -p /lib/libc.so.5 ${chroot}/lib
    fi
elif [ "${major_version}" = "6" -a -f /lib/libc.so.5 ]; then
    cp -p /lib/libc.so.5 ${chroot}/lib
elif [ "${major_version}" = "5" -a -f /lib/libc.so.6 ]; then
    cp -p /lib/libc.so.6 ${chroot}/lib
fi
cp -p /rescue/ps ${chroot}/bin
cp -p /usr/bin/killall ${chroot}/usr/bin

# XXX This is a hack to fix some recent pkg_add problems in some releases.
if [ -f ${pb}/jails/${jail}/pkg_install.tar ]; then
    tar -C ${chroot} -xf ${pb}/jails/${jail}/pkg_install.tar
fi

if [ -n "${CCACHE_ENABLED}" -a -f ${pb}/jails/${jail}/ccache.tar ]; then
    tar -C ${chroot} -xf ${pb}/jails/${jail}/ccache.tar
fi

echo ${OSREL}-${BRANCH} > ${chroot}/usr/bin/UNAME_VERSION

trap  "cleanup ${chroot} ${noclean} ${error} \"${cleandirs}\" ${pkgname} ${pb} ${branch}" 1 2 3 9 10 11 15

if [ -n "${DISTFILE_CACHE}" ]; then
    export DISTCACHE=/distcache
    mkdir -p ${chroot}${DISTCACHE}
    _MASTER_SITE_OVERRIDE='file:///distcache/${DIST_SUBDIR}/'
    export MASTER_SITE_OVERRIDE="${_MASTER_SITE_OVERRIDE} ${MASTER_SITE_OVERRIDE}"
fi

rm -rf ${chroot}/tmp/*
cd ${chroot}/tmp
mkdir -p depends distfiles packages

echo "building ${pkgname} in directory ${chroot}" | tee ${chroot}/tmp/${pkgname}.log
echo "with arguments: ${args}" | tee -a ${chroot}/tmp/${pkgname}.log

# If we're using a central distfile repository, mount it now
if [ -n "${DISTFILE_CACHE}" ]; then
    if echo "${DISTFILE_CACHE}" | grep -q '^[a-zA-Z0-9\.-_]*:/' ; then
	mount -o nfsv3,intr ${DISTFILE_CACHE} ${chroot}/${DISTCACHE}
    else
	mount -t nullfs ${DISTFILE_CACHE} ${chroot}/${DISTCACHE}
    fi
fi

mkdir -p ${chroot}/a/ports
rm -rf ${chroot}/usr/ports
if [ $nullfs -eq 1 ]; then
    mount -t nullfs ${pb}/portstrees/${portstree}/ports ${chroot}/a/ports
else
    mount -o nfsv3,intr -r localhost:${pb}/portstrees/${portstree}/ports ${chroot}/a/ports
fi
ln -sf ../a/ports ${chroot}/usr/ports

# Don't build in a world-writable directory because some ports hardcode
# this path and try to load things from it at runtime, which is bad for
# user security
rm -rf ${chroot}/${WRKDIRPREFIX}
mkdir -p ${chroot}/${WRKDIRPREFIX}

mkdir -p ${chroot}/usr/src

if [ $nullfs -eq 1 ]; then
    mount -t nullfs ${pb}/jails/${jail}/src ${chroot}/usr/src
else
    mount -o nfsv3,intr -r localhost:${pb}/jails/${jail}/src ${chroot}/usr/src
fi

mount -t devfs foo ${chroot}/dev

umount -f ${chroot}/compat/linux/proc > /dev/null 2>&1

if [ -n "${CCACHE_ENABLED}" ]; then
    mkdir -p ${pb}/${CCACHE_DIR}/${branch}
    mkdir -p ${chroot}/${CCACHE_DIR}
    if [ -n "${CCACHE_JAIL}" ]; then
	if [ $nullfs -eq 1 ]; then
	    mount -t nullfs ${pb}/${CCACHE_DIR}/${jail} ${chroot}/${CCACHE_DIR}
	else
	    mount -o rw,nfsv3,intr localhost:${pb}/${CCACHE_DIR}/${jail} ${chroot}/${CCACHE_DIR}
	fi
    else
	if [ $nullfs -eq 1 ]; then
	    mount -t nullfs ${pb}/${CCACHE_DIR}/${branch} ${chroot}/${CCACHE_DIR}
	else
	    mount -o rw,nfsv3,intr localhost:${pb}/${CCACHE_DIR}/${branch} ${chroot}/${CCACHE_DIR}
	fi
    fi
fi

for dir in ${cleandirs}; do
    if ! rm -rf ${chroot}${dir} >/dev/null 2>&1; then
	chflags -R noschg ${chroot}${dir}
	rm -rf ${chroot}${dir} >/dev/null 2>&1
    fi
done

rm -rf ${chroot}/var/db/pkg/*

mtree -deU -f ${chroot}/etc/mtree/BSD.root.dist -p ${chroot} \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.var.dist -p ${chroot}/var \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.usr.dist -p ${chroot}/usr \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.local.dist -p ${chroot}/usr/local \
  >/dev/null 2>&1

mkdir ${chroot}/usr/X11R6
if [ $X_WINDOW_SYSTEM = "xfree86-3" ]; then
    mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.x11.dist -p ${chroot}/usr/X11R6 >/dev/null 2>&1
elif [ $X_WINDOW_SYSTEM = "xorg" ]; then
    mtree -deU -f ${chroot}/a/ports/x11-servers/xorg-server/files/BSD.x11-xorg.dist -p ${chroot}/usr/X11R6 \
    >/dev/null 2>&1
else
    mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.x11-4.dist -p ${chroot}/usr/X11R6 \
    >/dev/null 2>&1
fi

if [ ${ARCH} = "i386" ]; then
    # JDK ports need linprocfs :(
    mkdir -p ${chroot}/compat/linux/proc
    chroot ${chroot} mount_linprocfs linprocfs /compat/linux/proc
fi

_ldconfig_dirs="/lib /usr/lib /usr/lib/compat"
ldconfig_dirs=""
for i in ${_ldconfig_dirs}; do
    if [ -d ${chroot}/${i} ]; then
	ldconfig_dirs="${ldconfig_dirs} ${i}"
    fi
done
chroot ${chroot} /sbin/ldconfig ${ldconfig_dirs}
if [ ${ARCH} = "i386" ]; then
    chroot ${chroot} /sbin/ldconfig -aout /usr/lib/aout /usr/lib/compat/aout
fi

while [ $# -gt 0 ]; do
    if [ -f ${packages}/All/$1 ]; then
	if [ ! -f ${chroot}/tmp/depends/$1 ]; then
	    echo "copying package $1 for ${pkgname}"
	    cp -p ${packages}/All/$1 ${chroot}/tmp/depends
	fi
    else
	echo "skipping package $1 for ${pkgname} since it is missing"
    fi
    shift
done

if ! cp -p ${pb}/scripts/buildscript ${chroot}; then
    error=3
    cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
fi
if ! cp -p ${pb}/scripts/pnohang ${chroot}; then
    error=4
    cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
fi

chroot ${chroot} /buildscript ${dirname} 1 2>&1 | tee -a ${chroot}/tmp/${pkgname}.log
if [ -f ${chroot}/tmp/status ]; then
    error=$(cat ${chroot}/tmp/status)
else
    error=255
fi

last_version=$(${pb}/scripts/tc getPortLastBuiltVersion -d ${portdir} -b ${branch})

if [ "${error}" = 0 ]; then
    ln -sf ${pkgname}.log2 ${chroot}/tmp/make.log

    chroot ${chroot} /usr/bin/nice -n $nice /buildscript ${dirname} 2  > ${chroot}/tmp/${pkgname}.log2 2>&1

    grep pnohang ${chroot}/tmp/${pkgname}.log2
    cat ${chroot}/tmp/${pkgname}.log2 >> ${chroot}/tmp/${pkgname}.log
    rm ${chroot}/tmp/${pkgname}.log2

    cp ${chroot}/tmp/${pkgname}.log ${pb}/logs/${branch}/${pkgname}.log
    error=$(cat ${chroot}/tmp/status)

    rm -rf ${chroot}/${WRKDIRPREFIX}

    if [ -e ${chroot}/tmp/work.tbz ]; then
	mkdir -p ${pb}/wrkdirs/${branch}
	cp ${chroot}/tmp/work.tbz ${pb}/wrkdirs/${branch}/${pkgname}.tbz
    fi

    if [ "${error}" = 0 ]; then
        if [ ! -z "${last_version}" ]; then
	    oldpkgs=$(find ${packages} -name "${last_version}${PKGSUFFIX}")
	    for _pkg in ${oldpkgs}; do
	        echo "INFO: Removing old package ${_pkg}."
	        rm -f ${_pkg}
	    done
        fi
	tar -C ${chroot}/tmp/packages -cf - . | \
		tar --unlink -C ${packages} -xvf -
	[ -f ${packages}/All/${pkgname}${PKGSUFFIX} ] && \
		touch ${packages}/All/${pkgname}${PKGSUFFIX}
	rm -f ${pb}/errors/${branch}/${pkgname}.log
	# Cache the distfiles if requested.  We will wait a maximum of
	# ten minutes before giving up on the lock.
	if [ -n "${DISTFILE_CACHE}" ]; then
	    if [ -f ${chroot}${DISTCACHE}/.lock ]; then
		lpid=$(echo ${chroot}${DISTCACHE}/.lock)
		if [ ${lpid} = $$ ]; then
		    rm -f ${chroot}${DISTCACHE}/.lock
		fi
	    fi
	    lcounter=0
	    lcounter_max=200
	    while [ -f ${chroot}${DISTCACHE}/.lock -a ${lcounter} -lt ${lcounter_max} ]; do
		echo "INFO: Waiting for DISTCACHE lock..."
		lcounter=$(expr ${lcounter} + 1)
		sleep 3
	    done
	    if [ ${lcounter} -lt ${lcounter_max} ]; then
	        echo $$ > ${chroot}${DISTCACHE}/.lock
	        tar -C ${chroot}/${DISTDIR} -cf - . | \
	            tar --unlink -C ${chroot}${DISTCACHE} -xvf -
	        rm -f ${chroot}${DISTCACHE}/.lock
	    fi
	fi
	if grep -q "${pkgname} is marked as broken: " ${pb}/logs/${branch}/${pkgname}.log ; then
	    status="BROKEN"
	else
	    status="SUCCESS"
	fi
	${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastSuccessfulBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s ${status}
	${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
    else
	cp ${chroot}/tmp/${pkgname}.log ${pb}/errors/${branch}/${pkgname}.log
	${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s FAIL
	${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
        ${pb}/scripts/tc sendBuildErrorMail -d ${portdir} -b ${branch}
    fi
else
    cp ${chroot}/tmp/${pkgname}.log ${pb}/errors/${branch}/${pkgname}.log
    cp ${chroot}/tmp/${pkgname}.log ${pb}/logs/${branch}/${pkgname}.log

    ${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
    ${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s FAIL
    ${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
    ${pb}/scripts/tc sendBuildErrorMail -d ${portdir} -b ${branch}
fi

cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
