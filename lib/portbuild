#!/bin/sh
#
# $MCom: portstools/tinderbox/lib/portbuild,v 1.93 2006/04/24 00:37:55 marcus Exp $

. ${pb}/scripts/lib/tinderlib.sh

usage () {
    echo "usage: $0 <build name> <jail name> <portstree name> [-noclean] [-plistcheck] [-nullfs] [-fetch-original] [-nolog] ED PD FD BD RD pkgname dirname"
    exit 1
}

cleanup()
{
    chroot=$1
    noclean=$2
    error=$3
    cleandirs=$4
    pkgname=$5
    build=$6

    umount ${chroot}/compat/linux/proc >/dev/null
    umount ${chroot}/proc >/dev/null

    if [ $noclean -eq 0 ]; then
	for dir in ${cleandirs}
	do
	    cleanDirs ${build} ${chroot}${dir}
	done
	rm -rf ${chroot}/tmp/*

	chroot ${chroot} /sbin/ldconfig -R
	if [ ${ARCH} = "i386" ]; then
	    chroot ${chroot} /sbin/ldconfig -aout -R
	fi
    fi

    echo "$pkgname done at `date`"
    ${tc} updateBuildCurrentPort -b ${build}
    exit $error
}

#---------------------------------------------------------------------------

error=0
init=0
noclean=0
nullfs=""
fetchorig=0
nolog=0
plistcheck=""
nice=0

# check parameter count
if [ $# -lt 10 ]; then
    usage
fi

# argument processing

# first, strip off the first 3 components as {build,jail,portstree}
build=$1
jail=$2
portstree=$3
shift 3

# process -arguments in any order.  previously, the code expected to
# see arguments in a very specific way, and silently did weird and
# wonderful things if they weren't
doneargs=0
while [ $# -gt 0 -a ${doneargs} -eq 0 ]; do

    case "x$1" in

    x-noclean)		noclean=1
			shift;;

    x-plistcheck)	plistcheck="plistcheck"
			shift;;

    x-nullfs)		nullfs="-n"
			shift;;

    x-fetch-original)	fetchorig=1
			shift;;

    x-nolog)		nolog=1
			shift;;

    x-*)		echo "portbuild: unknown argument: $1"
			exit 1;;

    *)			doneargs=1;;

    esac
done

# Finally, strip off the dependency lists, package name, and port directory
ED=$1
PD=$2
FD=$3
BD=$4
RD=$5
pkgname=$(basename $6 ${PKGSUFFIX})
dirname=$7

echo ${pkgname}
echo ${dirname}

tc=$(tinderLoc scripts tc)
chroot=$(tinderLoc buildroot ${build})
echo "chroot is: ${chroot}"
portdir=$(echo ${dirname} | sed -e 's|^/usr/ports/||')

dudsfile=$(tinderLoc builddata ${build})/duds
if [ -f ${dudsfile} ]; then
    if grep -qxF ${pkgname} ${dudsfile}; then
        echo "skipping ${pkgname} (found in duds)"
	${tc} updatePortStatus -d ${portdir} -b {$build} \
		-L -s DUD -v ${pkgname}
        exit 1
    fi
fi

# directories to clean
cleandirs="/usr/local /usr/X11R6 /compat /var/db/pkg"

for dir in ${cleandirs}; do
    cleanDirs ${build} ${chroot}${dir}
done
rm -rf ${chroot}/var/db/pkg/*

# reset mtrees for plist checking
mtree -deU -f ${chroot}/etc/mtree/BSD.root.dist \
      -p ${chroot} >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.var.dist \
      -p ${chroot}/var >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.usr.dist \
      -p ${chroot}/usr >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.local.dist \
      -p ${chroot}/usr/local >/dev/null 2>&1

case "${X_WINDOW_SYSTEM}" in
"xfree86-3")	_X_MTREE="BSD.x11.dist";;
*)		_X_MTREE="BSD.x11-4.dist";;
esac
mtree -deU -f ${chroot}/etc/mtree/${_X_MTREE} \
      -p ${chroot}/usr/X11R6 >/dev/null 2>&1

# mount linprocfs if required
if [ "${ARCH}" = "i386" -o "${ARCH}" = "amd64" ]; then
    mkdir -p ${chroot}/compat/linux/proc
    mount_linprocfs linprocfs ${chroot}/compat/linux/proc
fi

# mount procfs
mkdir -p ${chroot}/proc
mount_procfs procfs ${chroot}/proc

# Want to use the /etc/make.conf in the chroot (Jail)
unset __MAKE_CONF

export WRKDIRPREFIX=/work
export DISTDIR=/tmp/distfiles
export PACKAGES=/tmp/packages

# don't pass -j, -k etc. to sub-makes
unset MAKEFLAGS
unset PORTSDIR

# Unset all of the locale variables to ensure C/POSIX is used to build
# everything.
unset LC_ALL
unset LC_TIME
unset LC_CTYPE
unset LC_MONETARY
unset LC_COLLATE
unset LC_MESSAGES
unset LC_NUMERIC
unset LANG

# wait 1 hour before killing build with no output
export TIMEOUT=7200

# to prevent runaway processes -- 300 meg file size limit, one hour CPU limit
ulimit -f 614400
ulimit -t 3600

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/X11R6/bin

if [ x"${CCACHE_ENABLED}" = x"1" ]; then
    # XXX We need to do this since certain ports (e.g. cdrtools) don't
    # respect CC the way they should (thanks for the tip, Adam).
    export PATH=/opt:${PATH}
fi

echo "building $pkgname in $chroot"

${tc} updateBuildCurrentPort -b ${build} -n ${pkgname}

packages=$(tinderLoc packages ${build})
major_version=$(echo ${jail} | sed -E -e 's|(^.).*$|\1|')

if [ -n "${DISTFILE_CACHE}" ]; then
    export DISTCACHE=/distcache
    if [ ${fetchorig} -eq 0 ]; then
        _MSO='file:///distcache/${DIST_SUBDIR}/'
        export MASTER_SITE_OVERRIDE="${_MSO} ${MASTER_SITE_OVERRIDE}"
    fi
fi

if [ -n "${DISTFILE_URI}" ]; then
    _MSO=$(printf '%s/${DIST_SUBDIR}/' ${DISTFILE_URI})
    export MASTER_SITE_OVERRIDE="${_MSO} ${MASTER_SITE_OVERRIDE}"
fi

rm -rf ${chroot}/tmp/*
mkdir -p ${chroot}/tmp/depends ${chroot}/tmp/distfiles ${chroot}/tmp/packages

echo "building ${pkgname} in directory ${chroot}" | \
    tee ${chroot}/tmp/${pkgname}.log

trap  "cleanup ${chroot} ${noclean} ${error} \"${cleandirs}\" ${pkgname} ${build}" 1 2 3 9 10 11 15

# Don't build in a world-writable standard directory because some ports
# hardcode this path and try to load things from it at runtime, which is
# bad for user security
rm -rf ${chroot}/${WRKDIRPREFIX}
mkdir -p ${chroot}/${WRKDIRPREFIX}

if [ x"${CCACHE_ENABLED}" ]; then
    unset CCACHE_DISABLE
fi

_ldconfig_dirs="/lib /usr/lib /usr/lib/compat"
ldconfig_dirs=""
for i in ${_ldconfig_dirs}; do
    if [ -d ${chroot}/${i} ]; then
	ldconfig_dirs="${ldconfig_dirs} ${i}"
    fi
done
chroot ${chroot} /sbin/ldconfig ${ldconfig_dirs}
if [ ${ARCH} = "i386" ]; then
    chroot ${chroot} /sbin/ldconfig -aout /usr/lib/aout /usr/lib/compat/aout
fi

set x $ED $FD $PD $BD $RD
shift 1

cd ${chroot}/tmp/depends
while [ $# -gt 0 ]; do

    if [ ! -f $1 -a -n "${PACKAGE_URI}" ]; then
	echo "fetching package $1 for ${pkgname}"
	fetch ${PACKAGE_URI}/${build}/All/$1
    fi

    if [ ! -f $1 -a -f ${packages}/All/$1 ]; then
	echo "copying package $1 for ${pkgname}"
	cp -p ${packages}/All/$1 .
    fi

    if [ ! -f $1 ]; then
	echo "skipping package $1 for ${pkgname} since it is missing"
    fi

    shift
done

chroot ${chroot} /buildscript ${dirname} 1 "$ED" "$PD" "$FD" "$BD" "$RD" "${plistcheck}" 2>&1 | tee -a ${chroot}/tmp/${pkgname}.log
if [ -f ${chroot}/tmp/status ]; then
    error=$(cat ${chroot}/tmp/status)
else
    error=255
fi

last_version=$(${tc} getPortLastBuiltVersion -d ${portdir} -b ${build})
logsDir=$(tinderLoc buildlogs ${build})
errorsDir=$(tinderLoc builderrors ${build})

if [ "${error}" = "0" ]; then
    ln -sf ${pkgname}.log2 ${chroot}/tmp/make.log
    # Cache the distfiles if requested.  We will wait a maximum of
    # ten minutes before giving up on the lock.
    if [ -n "${DISTFILE_CACHE}" ]; then
	lockf -t 600 ${chroot}${DISTCACHE}/.lock tar -C ${chroot}/${DISTDIR} \
	    -cf - . | tar --unlink -C ${chroot}${DISTCACHE} -xvf -
	fi
    fi

    chroot ${chroot} /usr/bin/nice -n $nice /buildscript ${dirname} 2  "$ED" "$PD" "$FD" "$BD" "$RD" "${plistcheck}" > ${chroot}/tmp/${pkgname}.log2 2>&1

    grep pnohang ${chroot}/tmp/${pkgname}.log2
    cat ${chroot}/tmp/${pkgname}.log2 >> ${chroot}/tmp/${pkgname}.log
    rm ${chroot}/tmp/${pkgname}.log2

    cp ${chroot}/tmp/${pkgname}.log ${logsDir}/${pkgname}.log
    error=$(cat ${chroot}/tmp/status)

    rm -rf ${chroot}/${WRKDIRPREFIX}

    if [ -e ${chroot}/tmp/work.tbz ]; then
	workDir=$(tinderLoc buildworkdir ${build})
	mkdir -p ${workDir}
	cp ${chroot}/tmp/work.tbz ${workDir}/${pkgname}.tbz
    fi

    if [ "${error}" = "0" ]; then
        if [ ! -z "${last_version}" ]; then
	    oldpkgs=$(find ${packages} -name "${last_version}${PKGSUFFIX}")
	    for _pkg in ${oldpkgs}; do
	        echo "${build}: Removing old package ${_pkg}."
	        rm -f ${_pkg}
	    done
        fi
	tar -C ${chroot}/tmp/packages -cf - . | \
		tar --unlink -C ${packages} -xvf -
	[ -f ${packages}/All/${pkgname}${PKGSUFFIX} ] && \
		touch ${packages}/All/${pkgname}${PKGSUFFIX}
	rm -f ${errorsDir}/${pkgname}.log
	if grep -q "${pkgname} is marked as broken: " ${logsDir}/${pkgname}.log ; then
	    status="BROKEN"
	elif [ -f ${chroot}/tmp/leftovers ]; then
	    status="LEFTOVERS"
	else
	    status="SUCCESS"
	fi
	${tc} updatePortStatus -d ${portdir} -b ${build} \
		-L -S -s ${status} -v ${pkgname} -r "__nofail__"
	if [ ${status} = "LEFTOVERS" ]; then
	    ${tc} sendBuildErrorMail -d ${portdir} -b ${build} -p ${pkgname} -l
	fi
    else
	ln -f ${logsDir}/${pkgname}.log ${errorsDir}/${pkgname}.log
	reason=""
	if [ ${nolog} -eq 0 ]; then
	    reason="-r $(${tc} processLog -l ${logsDir}/${pkgname}.log)"
	fi
	${tc} updatePortStatus -d ${portdir} -b ${build} \
		-L -s FAIL -v ${pkgname} ${reason}
        ${tc} sendBuildErrorMail -d ${portdir} -b ${build} -p ${pkgname}
    fi
else
    cp ${chroot}/tmp/${pkgname}.log ${logsDir}/${pkgname}.log
    ln -f ${logsDir}/${pkgname}.log ${errorsDir}/${pkgname}.log

    reason=""
    if [ ${nolog} -eq 0 ]; then
        reason="-r $(${tc} processLog -l ${logsDir}/${pkgname}.log)"
    fi
    ${tc} updatePortStatus -d ${portdir} -b ${build} \
		-L -s FAIL -v ${pkgname} ${reason}
    ${tc} sendBuildErrorMail -d ${portdir} -b ${build} -p ${pkgname}
fi

cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${build}
