#!/bin/sh
#-
# Copyright (c) 2004-2005 FreeBSD GNOME Team <freebsd-gnome@FreeBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $Id: mkjail,v 1.16 2005/02/13 07:08:33 marcus Exp $
#


pb=/space

_jails=$(${pb}/scripts/tc listJails)

if [ `id -u` != 0 ]; then
    echo "ERROR: You must be root to run $0."
    exit 1
fi

if [ -z "$1" ]; then
    echo "Please specify a jail name."
    echo "Current jails are:"
    for i in ${_jails}; do
	echo "	${i}"
    done
    exit 1
fi

. ${pb}/scripts/buildenv

jail=$1

if ! echo ${_jails} | grep -qw ${jail}; then
    echo "ERROR: Unknown jail, \"${jail}\"."
    exit 1
fi

# We only care about SRCBASE, so the other parameters can be anything.
buildenv ${pb} "NULL" ${jail} "NULL"

update_cmd=$(${pb}/scripts/tc getSrcUpdateCmd -j ${jail})
if [ ! -z "${update_cmd}" ]; then
    echo "INFO: Updating jail with command ${update_cmd}"
    eval ${update_cmd} > /dev/null 2>&1

    if [ $? != 0 ]; then
	echo "ERROR: Jail update failed."
	exit 1
    fi
fi

D=${pb}/jails/${jail}/tmp
chflags -R noschg ${D}
rm -rf ${D}

export __MAKE_CONF=/dev/null

cd ${SRCBASE}
mkdir -p ${D}
env DESTDIR=${D} make world

if [ $? != 0 ]; then
    echo "ERROR: make world failed.  See above output."
    exit 1
fi

if ! make -n distribution; then
    cd etc
fi
make distribution DESTDIR=${D}

if [ $? != 0 ]; then
    echo "ERROR: make distribution failed.  See above output."
    exit 1
fi

cd ${D}
ln -sf dev/null kernel
ln -sf aj ${D}/etc/malloc.conf

touch -f ${D}/etc/fstab
touch -f ${D}/etc/wall_cmos_clock
cp -f /etc/resolv.conf ${D}/etc

mtree -deU -f ${SRCBASE}/etc/mtree/BSD.root.dist -p ${D}/
mtree -deU -f ${SRCBASE}/etc/mtree/BSD.var.dist -p ${D}/var
mtree -deU -f ${SRCBASE}/etc/mtree/BSD.usr.dist -p ${D}/usr
mtree -deU -f ${SRCBASE}/etc/mtree/BSD.local.dist -p ${D}/usr/local

date '+%Y%m%d' > ${D}/var/db/port.mkversion
mkdir -p ${D}/var/run

rm -f ${D}/usr/lib/aout/lib*_p.a

cd ${D}
tar cf ${pb}/jails/${jail}/${jail}.tar.new .
mv -f ${pb}/jails/${jail}/${jail}.tar.new ${pb}/jails/${jail}/${jail}.tar

rm -rf ${D} 2> /dev/null
if [ -d ${D} ]; then
    chflags -R noschg ${D}
    rm -rf ${D}
fi

${pb}/scripts/tc updateJailLastBuilt -j ${jail}
