$MCom: portstools/tinderbox/README,v 1.19 2005/07/10 07:29:42 oliver Exp $

BASIC INSTALLATION AND USAGE INSTRUCTIONS

Requirements: FreeBSD 6-CURRENT (earlier versions should work, but development
  happens on -CURRENT only) perl, DBD::Mysql perl module, MySQL 4.1 or newer.
  php4, php4-mysql extension, PEAR::DB() for web frontend
  Make sure you have register_globals=on in your php.ini

- Create /space, put scripts under /space/scripts, edit ds.pm, tinderbox.ph,
  ds.inc (for the web frontend ), setup MySQL database
- Create database tinderbox and grant permissions to user tinder
- Create tables within tinderbox database with:
	mysql -utinder -p tinderbox < tinderbox.schema

- Initialize the Tinderbox: cd /space/scripts && ./tc init
- Setup NFS server with this in /etc/exports:
  /space  -ro -alldirs -maproot=0:0 localhost
  If your /space is a symlink, export real filesystem's mount point
- Create new jail using create_new_jail
- Create new ports tree using create_new_portstree
- Create new build using create_new_build
- If you will be building ports such as linux-jdk* that require linprocfs
  be sure to kldload linprocfs before starting Tinderbox builds

If you want to mount /ports inside your portstree or /src inside your jail
via nullfs or nfs from an other location, define
  #MOUNT_PORTSTREE_<portstreename>="server:/directory"
  #MOUNT_JAIL_<jailname>="server:/directory"
for nfs mounts or
  #MOUNT_PORTSTREE_<portstreename>="/directory"
  #MOUNT_JAIL_<jailname>="/directory"
for nullfs mounts in rawenv before you call create_new_portstree or
create_new_jail. They will automatically utilise this.
Furthermore, tinderbuild will ensure that these filesystems are correctly
mounted so you don't need to mount them by your own before calling tinderbuild.

To update an existing jail:
- mkjail

To run a build of a port:
- tc addPort -b <buildname> -d <port directory> -r
- tinderbuild -b <buildname> <port directory>

tinderbuild options:
-init will call mkjail then mkbuild
-cleanpackages will remove all packages already built for the given build.
-updateports will update the build's portstree (dangerous if doing multiple
  parallel runs)
-skipmake skips the Makefile generation stage if a good Makefile already exists
-noduds skip duds file generation (packages which are forbidden or ignored will
  be built)

Getting a copy of work directory for failed build:
- touch .keep file into port directory
- make sure directory /space/wrkdirs/<build_name> exists
  Tarred work directory for the build will appear there.

Distfile caching:
- add DISTFILE_CACHE="<nfs mount>" to rawenv, eg.:
  DISTFILE_CACHE="localhost:/usr/ports/distfiles"
Note: this doesn't have to be an NFS mount.  It can be a local path as well.
If it is a local path, it will be mounted with mount_nullfs.

===================================================================

USING CCACHE WITH TINDERBOX BUILDS

To use ccache support, you must first create a tar file with ccache and various
symlinks within a /opt directory.  Your tarball contents should be:

opt
opt/ccache
opt/gcc -> ccache
opt/cc -> ccache
opt/g++ -> ccache
opt/c++ -> ccache

This tarball must be called ccache.tar, and be placed in the jail directory
for each jail that will use ccache (e.g. /space/jails/5-STABLE).

Once the tarball is created, add:

CCACHE_ENABLED=1
CCACHE_DIR=/ccache
CCACHE_NOLINK=1
CCACHE_MAX_SIZE=2G
 G=GB M=MB K=KB, default is 1GB

To your rawenv file.  Then run your builds as you normally would.  To debug
ccache, add the following to rawenv:

CCACHE_LOGFILE=/ccache.log

Then, in the root of each build directory, there will be a ccache.log that
will let you know if the cache is working.

===================================================================

USING tinderd FOR AUTOMATING/QUEUEING PORT BUILDS

If you want to use tinderbox to test many different ports after each other
you probably want "tinderd". tinderd runs as a daemon and looks to see if
something was added to the "ports to build queue". You can add different
ports for different builds for different hosts with different priorities.
tinderd will automaticly pick up the port with the highest priority for its
host and starts building it. That repeats until the queue is empty. After
the queue got empty tinderd will sleep for a configurable amount of time
(default: 120 seconds) thereafter it starts searching for new queue entries
again.

To set it up you must first add a Tinderbox host to the database:
  tc addHost
Right after that you can start tinderd. (it will stay in foreground by default)
Now use
  tc addBuildPortsQueueEntry -b <build name> -d <port directory>
to add a port to the queue. tinderd will automaticly pick it up, run a
tinderbuild on it, and will delete the entry after tinderbuild completed.

To use tinderd scheduling via www (www-exp/) you must first create
an User
  tc addUser -n <username> -e <email> -p <password> -w
Then you have to define one www administrator who has full rights on
all hosts/builds and is the only account which might add other users.
  tc setWwwAdmin -u <username>

After that, just browse to www-exp/ with your webbrowser and login
with <username> and <password>. You can now create and modify other
users easily by using the "Add User" or "Modify User" links.


===================================================================

GETTING TINDERBOX

The latest release of Tinderbox can be downloaded from
http://tinderbox.marcuscom.com.

Tinderbox lives in Marcuscom CVS repository under portstools module.

http://www.marcuscom.com:8080/cgi-bin/cvsweb.cgi/
